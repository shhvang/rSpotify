name: Deploy to Production

# Production Deployment Workflow
# Triggers: Push to main branch (after merging from develop) + PRs to main
# Environment: Production bot (rspotify)
# Process Manager: Supervisor
# Domain: rspotify.shhvang.space

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Create test environment
      run: |
        python -c "from cryptography.fernet import Fernet; print('ENCRYPTION_KEY=' + Fernet.generate_key().decode())" > .env
        echo "TELEGRAM_BOT_TOKEN=test_token" >> .env
        echo "MONGODB_URI=mongodb://localhost:27017/test_db" >> .env
    
    - name: Run tests
      run: pytest tests/ -v --cov=rspotify_bot

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy via SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/key
        chmod 600 ~/.ssh/key
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
        
        # Execute deployment by piping script directly (avoids binary file issues)
        export TELEGRAM_BOT_TOKEN="${{ secrets.PRODUCTION_BOT_TOKEN }}"
        export MONGODB_URI="${{ secrets.MONGODB_URI }}"
        export OWNER_TELEGRAM_ID="${{ secrets.OWNER_TELEGRAM_ID }}"
        export ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}"
        export SPOTIFY_CLIENT_ID="${{ secrets.SPOTIFY_CLIENT_ID }}"
        export SPOTIFY_CLIENT_SECRET="${{ secrets.SPOTIFY_CLIENT_SECRET }}"
        export PASTEBIN_API_KEY="${{ secrets.PASTEBIN_API_KEY }}"
        export PASTEBIN_USER_KEY="${{ secrets.PASTEBIN_USER_KEY }}"
        export BOT_USERNAME="${{ secrets.BOT_USERNAME }}"
        export CERTBOT_EMAIL="${{ secrets.CERTBOT_EMAIL }}"
        export BETTERTHANVERY_BOT_TOKEN="${{ secrets.BETTERTHANVERY_BOT_TOKEN }}"
        export PERFECTCIRCLE_BOT_TOKEN="${{ secrets.PERFECTCIRCLE_BOT_TOKEN }}"
        
        cat scripts/deploy.sh | ssh -i ~/.ssh/key root@${{ secrets.PRODUCTION_HOST }} "export TELEGRAM_BOT_TOKEN='$TELEGRAM_BOT_TOKEN' MONGODB_URI='$MONGODB_URI' OWNER_TELEGRAM_ID='$OWNER_TELEGRAM_ID' ENCRYPTION_KEY='$ENCRYPTION_KEY' SPOTIFY_CLIENT_ID='$SPOTIFY_CLIENT_ID' SPOTIFY_CLIENT_SECRET='$SPOTIFY_CLIENT_SECRET' PASTEBIN_API_KEY='$PASTEBIN_API_KEY' PASTEBIN_USER_KEY='$PASTEBIN_USER_KEY' BOT_USERNAME='$BOT_USERNAME' CERTBOT_EMAIL='$CERTBOT_EMAIL' BETTERTHANVERY_BOT_TOKEN='$BETTERTHANVERY_BOT_TOKEN' PERFECTCIRCLE_BOT_TOKEN='$PERFECTCIRCLE_BOT_TOKEN' && bash -s"
    
    - name: Notify
      if: always()
      run: |
        STATUS="${{ job.status == 'success' && '✅ Deployed successfully!' || '❌ Deployment failed!' }}"
        curl -X POST "https://api.telegram.org/bot${{ secrets.PRODUCTION_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.OWNER_TELEGRAM_ID }}" \
          -d "text=$STATUS"
