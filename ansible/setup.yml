---
# Ansible playbook for rSpotify Bot VPS provisioning and deployment
# Supports automated monthly server rotation

- name: Setup rSpotify Bot on VPS
  hosts: rspotify_servers
  become: yes
  vars:
    app_name: rspotify-bot
    app_user: rspotify
    app_dir: "/opt/{{ app_name }}"
    python_version: "3.11"
    telegram_bot_token: "{{ lookup('env', 'TELEGRAM_BOT_TOKEN') }}"
    owner_telegram_id: "{{ lookup('env', 'OWNER_TELEGRAM_ID') }}"
    mongodb_uri: "{{ lookup('env', 'MONGODB_URI') }}"
    encryption_key: "{{ lookup('env', 'ENCRYPTION_KEY') }}"
    pastebin_api_key: "{{ lookup('env', 'PASTEBIN_API_KEY') | default('') }}"
    pastebin_user_key: "{{ lookup('env', 'PASTEBIN_USER_KEY') | default('') }}"
    
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
    
    - name: Install required system packages
      apt:
        name:
          - python3.11
          - python3.11-venv
          - python3.11-dev
          - python3-pip
          - git
          - nginx
          - supervisor
          - certbot
          - python3-certbot-nginx
        state: present
      when: ansible_os_family == "Debian"
    
    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        create_home: yes
    
    - name: Create application directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}"
        - "{{ app_dir }}/logs"
        - "{{ app_dir }}/backups"
        - /etc/rspotify-bot
    
    - name: Clone application repository
      git:
        repo: "{{ github_repo_url }}"
        dest: "{{ app_dir }}/src"
        version: "{{ app_version | default('main') }}"
        force: yes
      become_user: "{{ app_user }}"
      notify: restart rspotify-bot
    
    - name: Create Python virtual environment
      pip:
        name: pip
        virtualenv: "{{ app_dir }}/venv"
        virtualenv_command: python3.11 -m venv
      become_user: "{{ app_user }}"
    
    - name: Install Python dependencies
      pip:
        requirements: "{{ app_dir }}/src/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
      become_user: "{{ app_user }}"
    
    - name: Install application in development mode
      pip:
        name: "file://{{ app_dir }}/src"
        virtualenv: "{{ app_dir }}/venv"
        editable: yes
      become_user: "{{ app_user }}"
    
    - name: Template environment configuration
      template:
        src: env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
      notify: restart rspotify-bot
    
    - name: Template supervisor configuration
      template:
        src: supervisor.conf.j2
        dest: /etc/supervisor/conf.d/rspotify-bot.conf
        owner: root
        group: root
        mode: '0644'
      notify:
        - reload supervisor
        - restart rspotify-bot
    
    - name: Template nginx configuration for webhook
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/rspotify-bot
        owner: root
        group: root
        mode: '0644'
      notify: reload nginx
    
    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/rspotify-bot
        dest: /etc/nginx/sites-enabled/rspotify-bot
        state: link
      notify: reload nginx
    
    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx
    
    - name: Setup SSL certificate with Let's Encrypt
      command: >
        certbot --nginx --non-interactive --agree-tos
        --email {{ letsencrypt_email }}
        -d {{ domain_name }}
      args:
        creates: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
    
    - name: Setup log rotation
      template:
        src: logrotate.j2
        dest: /etc/logrotate.d/rspotify-bot
        owner: root
        group: root
        mode: '0644'
    
    - name: Setup backup cron job
      cron:
        name: "rSpotify Bot backup"
        minute: "0"
        hour: "2"
        job: "{{ app_dir }}/scripts/backup.sh"
        user: "{{ app_user }}"
    
    - name: Update DuckDNS IP
      uri:
        url: "https://www.duckdns.org/update?domains={{ duckdns_domain }}&token={{ duckdns_token }}&ip="
        method: GET
      when: duckdns_domain is defined and duckdns_token is defined
    
    - name: Ensure services are running
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - nginx
        - supervisor
  
  handlers:
    - name: reload supervisor
      systemd:
        name: supervisor
        state: reloaded
    
    - name: restart rspotify-bot
      supervisorctl:
        name: rspotify-bot
        state: restarted
    
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded

# Rollback playbook for quick recovery
- name: Rollback rSpotify Bot deployment
  hosts: rspotify_servers
  become: yes
  vars:
    app_name: rspotify-bot
    app_user: rspotify
    app_dir: "/opt/{{ app_name }}"
  
  tasks:
    - name: Checkout previous version
      git:
        repo: "{{ github_repo_url }}"
        dest: "{{ app_dir }}/src"
        version: "{{ rollback_version }}"
        force: yes
      become_user: "{{ app_user }}"
      when: rollback_version is defined
    
    - name: Restart application
      supervisorctl:
        name: rspotify-bot
        state: restarted